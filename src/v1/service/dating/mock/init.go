// Code generated by MockGen. DO NOT EDIT.
// Source: src/v1/service/dating/init.go
//
// Generated by this command:
//
//	mockgen -source=src/v1/service/dating/init.go -destination=src/v1/service/dating/mock/init.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/usagifm/dating-app/src/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method.
func (m *MockUserRepository) CreateNewUser(ctx context.Context, param entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, param)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockUserRepositoryMockRecorder) CreateNewUser(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUserRepository)(nil).CreateNewUser), ctx, param)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserProfile mocks base method.
func (m *MockUserRepository) GetUserProfile(ctx context.Context, userId int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserRepositoryMockRecorder) GetUserProfile(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserRepository)(nil).GetUserProfile), ctx, userId)
}

// MockUserPreferenceRepository is a mock of UserPreferenceRepository interface.
type MockUserPreferenceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserPreferenceRepositoryMockRecorder
}

// MockUserPreferenceRepositoryMockRecorder is the mock recorder for MockUserPreferenceRepository.
type MockUserPreferenceRepositoryMockRecorder struct {
	mock *MockUserPreferenceRepository
}

// NewMockUserPreferenceRepository creates a new mock instance.
func NewMockUserPreferenceRepository(ctrl *gomock.Controller) *MockUserPreferenceRepository {
	mock := &MockUserPreferenceRepository{ctrl: ctrl}
	mock.recorder = &MockUserPreferenceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPreferenceRepository) EXPECT() *MockUserPreferenceRepositoryMockRecorder {
	return m.recorder
}

// GetAnotherUserPreferenceByPreference mocks base method.
func (m *MockUserPreferenceRepository) GetAnotherUserPreferenceByPreference(ctx context.Context, notIncludedUserId []*int, minAge, maxAge int, preferredGender string) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnotherUserPreferenceByPreference", ctx, notIncludedUserId, minAge, maxAge, preferredGender)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnotherUserPreferenceByPreference indicates an expected call of GetAnotherUserPreferenceByPreference.
func (mr *MockUserPreferenceRepositoryMockRecorder) GetAnotherUserPreferenceByPreference(ctx, notIncludedUserId, minAge, maxAge, preferredGender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnotherUserPreferenceByPreference", reflect.TypeOf((*MockUserPreferenceRepository)(nil).GetAnotherUserPreferenceByPreference), ctx, notIncludedUserId, minAge, maxAge, preferredGender)
}

// GetUserPreference mocks base method.
func (m *MockUserPreferenceRepository) GetUserPreference(ctx context.Context, userId int) (*entity.UserPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPreference", ctx, userId)
	ret0, _ := ret[0].(*entity.UserPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPreference indicates an expected call of GetUserPreference.
func (mr *MockUserPreferenceRepositoryMockRecorder) GetUserPreference(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreference", reflect.TypeOf((*MockUserPreferenceRepository)(nil).GetUserPreference), ctx, userId)
}

// UpdateUserPreference mocks base method.
func (m *MockUserPreferenceRepository) UpdateUserPreference(ctx context.Context, param entity.UserPreference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPreference", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPreference indicates an expected call of UpdateUserPreference.
func (mr *MockUserPreferenceRepositoryMockRecorder) UpdateUserPreference(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPreference", reflect.TypeOf((*MockUserPreferenceRepository)(nil).UpdateUserPreference), ctx, param)
}

// MockUserSwipeRepository is a mock of UserSwipeRepository interface.
type MockUserSwipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSwipeRepositoryMockRecorder
}

// MockUserSwipeRepositoryMockRecorder is the mock recorder for MockUserSwipeRepository.
type MockUserSwipeRepositoryMockRecorder struct {
	mock *MockUserSwipeRepository
}

// NewMockUserSwipeRepository creates a new mock instance.
func NewMockUserSwipeRepository(ctrl *gomock.Controller) *MockUserSwipeRepository {
	mock := &MockUserSwipeRepository{ctrl: ctrl}
	mock.recorder = &MockUserSwipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSwipeRepository) EXPECT() *MockUserSwipeRepositoryMockRecorder {
	return m.recorder
}

// CreateUserSwipe mocks base method.
func (m *MockUserSwipeRepository) CreateUserSwipe(ctx context.Context, param entity.UserSwipe) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSwipe", ctx, param)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSwipe indicates an expected call of CreateUserSwipe.
func (mr *MockUserSwipeRepositoryMockRecorder) CreateUserSwipe(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSwipe", reflect.TypeOf((*MockUserSwipeRepository)(nil).CreateUserSwipe), ctx, param)
}

// GetMatchedUserSwipe mocks base method.
func (m *MockUserSwipeRepository) GetMatchedUserSwipe(ctx context.Context, swipedId, swiperId int) (*entity.UserSwipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchedUserSwipe", ctx, swipedId, swiperId)
	ret0, _ := ret[0].(*entity.UserSwipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchedUserSwipe indicates an expected call of GetMatchedUserSwipe.
func (mr *MockUserSwipeRepositoryMockRecorder) GetMatchedUserSwipe(ctx, swipedId, swiperId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchedUserSwipe", reflect.TypeOf((*MockUserSwipeRepository)(nil).GetMatchedUserSwipe), ctx, swipedId, swiperId)
}

// GetTodaySwipesUserId mocks base method.
func (m *MockUserSwipeRepository) GetTodaySwipesUserId(ctx context.Context, userId int) ([]*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodaySwipesUserId", ctx, userId)
	ret0, _ := ret[0].([]*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodaySwipesUserId indicates an expected call of GetTodaySwipesUserId.
func (mr *MockUserSwipeRepositoryMockRecorder) GetTodaySwipesUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodaySwipesUserId", reflect.TypeOf((*MockUserSwipeRepository)(nil).GetTodaySwipesUserId), ctx, userId)
}

// GetUserSwipe mocks base method.
func (m *MockUserSwipeRepository) GetUserSwipe(ctx context.Context, userId int) ([]*entity.UserSwipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSwipe", ctx, userId)
	ret0, _ := ret[0].([]*entity.UserSwipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSwipe indicates an expected call of GetUserSwipe.
func (mr *MockUserSwipeRepositoryMockRecorder) GetUserSwipe(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSwipe", reflect.TypeOf((*MockUserSwipeRepository)(nil).GetUserSwipe), ctx, userId)
}

// MockUserMatchRepository is a mock of UserMatchRepository interface.
type MockUserMatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserMatchRepositoryMockRecorder
}

// MockUserMatchRepositoryMockRecorder is the mock recorder for MockUserMatchRepository.
type MockUserMatchRepositoryMockRecorder struct {
	mock *MockUserMatchRepository
}

// NewMockUserMatchRepository creates a new mock instance.
func NewMockUserMatchRepository(ctrl *gomock.Controller) *MockUserMatchRepository {
	mock := &MockUserMatchRepository{ctrl: ctrl}
	mock.recorder = &MockUserMatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMatchRepository) EXPECT() *MockUserMatchRepositoryMockRecorder {
	return m.recorder
}

// CreateUserMatch mocks base method.
func (m *MockUserMatchRepository) CreateUserMatch(ctx context.Context, param entity.UserMatch) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserMatch", ctx, param)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserMatch indicates an expected call of CreateUserMatch.
func (mr *MockUserMatchRepositoryMockRecorder) CreateUserMatch(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserMatch", reflect.TypeOf((*MockUserMatchRepository)(nil).CreateUserMatch), ctx, param)
}

// GetUserMatchesUserId mocks base method.
func (m *MockUserMatchRepository) GetUserMatchesUserId(ctx context.Context, userId int) ([]*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchesUserId", ctx, userId)
	ret0, _ := ret[0].([]*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchesUserId indicates an expected call of GetUserMatchesUserId.
func (mr *MockUserMatchRepositoryMockRecorder) GetUserMatchesUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchesUserId", reflect.TypeOf((*MockUserMatchRepository)(nil).GetUserMatchesUserId), ctx, userId)
}

// InvalidateUserMatchesRedis mocks base method.
func (m *MockUserMatchRepository) InvalidateUserMatchesRedis(ctx context.Context, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserMatchesRedis", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserMatchesRedis indicates an expected call of InvalidateUserMatchesRedis.
func (mr *MockUserMatchRepositoryMockRecorder) InvalidateUserMatchesRedis(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserMatchesRedis", reflect.TypeOf((*MockUserMatchRepository)(nil).InvalidateUserMatchesRedis), ctx, userId)
}
