// Code generated by MockGen. DO NOT EDIT.
// Source: src/v1/service/auth/init.go
//
// Generated by this command:
//
//	mockgen -source=src/v1/service/auth/init.go -destination=src/v1/service/auth/mock/init.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/usagifm/dating-app/src/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method.
func (m *MockUserRepository) CreateNewUser(ctx context.Context, param entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, param)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockUserRepositoryMockRecorder) CreateNewUser(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUserRepository)(nil).CreateNewUser), ctx, param)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserProfile mocks base method.
func (m *MockUserRepository) GetUserProfile(ctx context.Context, userId int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserRepositoryMockRecorder) GetUserProfile(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserRepository)(nil).GetUserProfile), ctx, userId)
}

// MockUserReferenceRepository is a mock of UserReferenceRepository interface.
type MockUserReferenceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserReferenceRepositoryMockRecorder
}

// MockUserReferenceRepositoryMockRecorder is the mock recorder for MockUserReferenceRepository.
type MockUserReferenceRepositoryMockRecorder struct {
	mock *MockUserReferenceRepository
}

// NewMockUserReferenceRepository creates a new mock instance.
func NewMockUserReferenceRepository(ctrl *gomock.Controller) *MockUserReferenceRepository {
	mock := &MockUserReferenceRepository{ctrl: ctrl}
	mock.recorder = &MockUserReferenceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReferenceRepository) EXPECT() *MockUserReferenceRepositoryMockRecorder {
	return m.recorder
}

// CreateNewUserPreference mocks base method.
func (m *MockUserReferenceRepository) CreateNewUserPreference(ctx context.Context, param entity.UserPreference) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUserPreference", ctx, param)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUserPreference indicates an expected call of CreateNewUserPreference.
func (mr *MockUserReferenceRepositoryMockRecorder) CreateNewUserPreference(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUserPreference", reflect.TypeOf((*MockUserReferenceRepository)(nil).CreateNewUserPreference), ctx, param)
}
